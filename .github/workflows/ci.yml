name: ci
on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '00 01 * * *'
jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          # We test zuse on a pinned version of Rust, along with the moving
          # targets of 'stable' and 'beta' for good measure.
          - pinned
          - stable
          - beta
          # Our release builds are generated by a nightly compiler to take
          # advantage of the latest optimizations/compile time improvements. So
          # we test all of them here. (We don't do mips releases, but test on
          # mips for big-endian coverage.)
          - nightly
          - nightly-musl
          - nightly-32
          - nightly-mips
          - nightly-arm
          - macos
          - win-msvc
          - win-gnu
        include:
          - build: pinned
            os: ubuntu-18.04
            rust: 1.41.0
          - build: stable
            os: ubuntu-18.04
            rust: stable
          - build: beta
            os: ubuntu-18.04
            rust: beta
          - build: nightly
            os: ubuntu-18.04
            rust: nightly
          - build: nightly-musl
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: nightly-32
            os: ubuntu-18.04
            rust: nightly
            target: i686-unknown-linux-gnu
          - build: nightly-mips
            os: ubuntu-18.04
            rust: nightly
            target: mips64-unknown-linux-gnuabi64
          - build: nightly-arm
            os: ubuntu-18.04
            rust: nightly
            # For stripping release binaries:
            # docker run --rm -v $PWD/target:/target:Z \
            #   rustembedded/cross:arm-unknown-linux-gnueabihf \
            #   arm-linux-gnueabihf-strip \
            #   /target/arm-unknown-linux-gnueabihf/debug/zuse
            target: arm-unknown-linux-gnueabihf
          - build: macos
            os: macos-latest
            rust: nightly
          - build: win-msvc
            os: windows-2019
            rust: nightly
          - build: win-gnu
            os: windows-2019
            rust: nightly-x86_64-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-18.04'
        run: |
          ci/ubuntu-install-packages

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Use Cross
        if: matrix.target != ''
        run: |
          # FIXME: to work around bugs in latest cross release, install master.
          # See: https://github.com/rust-embedded/cross/issues/357
          cargo install --git https://github.com/rust-embedded/cross
          echo "::set-env name=CARGO::cross"
          echo "::set-env name=TARGET_FLAGS::--target ${{ matrix.target }}"
          echo "::set-env name=TARGET_DIR::./target/${{ matrix.target }}"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"

      - name: Build zuse and all crates
        run: ${{ env.CARGO }} build --verbose --all ${{ env.TARGET_FLAGS }}

      # This is useful for debugging problems when the expected build artifacts
      # (like shell completions and man pages) aren't generated.
      - name: Show build.rs stderr
        shell: bash
        run: |
          set +x
          stderr="$(find "${{ env.TARGET_DIR }}/debug" -name stderr -print0 | xargs -0 ls -t | head -n1)"
          if [ -s "$stderr" ]; then
            echo "===== $stderr ===== "
            cat "$stderr"
            echo "====="
          fi
          set -x
