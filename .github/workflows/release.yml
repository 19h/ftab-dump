name: release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
    # Set to force version number, e.g., when no tag exists.
    # ZUSE_VERSION: TEST-0.0.0
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.ZUSE_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "::set-env name=ZUSE_VERSION::${GITHUB_REF#refs/tags/}"
          echo "version is: ${{ env.ZUSE_VERSION }}"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.ZUSE_VERSION }}
          release_name: ${{ env.ZUSE_VERSION }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.ZUSE_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Apparently needed to use a2x on macOS.
      XML_CATALOG_FILES: /usr/local/etc/xml/catalog
    strategy:
      matrix:
        build: [linux-x64, linux-x86, linux-musl-x86, linux-arm, linux-arm64, macos, win-msvc, win-gnu, win32-msvc]
        include:
          - build: linux-x64
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-gnu
          - build: linux-x86
            os: ubuntu-18.04
            rust: nightly
            target: i686-unknown-linux-gnu
          - build: linux-musl-x86
            os: ubuntu-18.04
            rust: nightly
            target: i686-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-18.04
            rust: nightly
            target: arm-unknown-linux-gnueabihf
          - build: linux-arm64
            os: ubuntu-18.04
            rust: nightly
            target: aarch64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-2019
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-2019
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
          - build: win32-msvc
            os: windows-2019
            rust: nightly
            target: i686-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-18.04'
        run: |
          ci/ubuntu-install-packages

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        # if: matrix.os != 'windows-2019'
        run: |
          # FIXME: to work around bugs in latest cross release, install master.
          # See: https://github.com/rust-embedded/cross/issues/357
          cargo install --git https://github.com/rust-embedded/cross
          echo "::set-env name=CARGO::cross"
          echo "::set-env name=TARGET_FLAGS::--target ${{ matrix.target }}"
          echo "::set-env name=TARGET_DIR::./target/${{ matrix.target }}"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Set release upload URL and release version
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
          echo "release upload url: $RELEASE_UPLOAD_URL"
          release_version="$(cat artifacts/release-version)"
          echo "::set-env name=RELEASE_VERSION::$release_version"
          echo "release version: $RELEASE_VERSION"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Build release binary
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux-x64' || matrix.build == 'linux-x86' || matrix.build == 'linux-musl-x86' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/zuse"

      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:arm-unknown-linux-gnueabihf \
            arm-linux-gnueabihf-strip \
            /target/arm-unknown-linux-gnueabihf/release/zuse

      - name: Build archive
        shell: bash
        run: |
          outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
          staging="zuse-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
          mkdir -p "$staging"

          cp readme.md "$staging/"

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/zuse.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "::set-env name=ASSET::$staging.zip"
          else
            cp "target/${{ matrix.target }}/release/zuse" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "::set-env name=ASSET::$staging.tar.gz"
          fi
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
